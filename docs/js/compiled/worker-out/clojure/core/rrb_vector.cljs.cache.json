["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$gen-vector-method","~$clojure.core.rrb-vector.macros"],"~:excludes",["~#set",["~$vec","~$vector","~$subvec"]],"~:name","~$clojure.core.rrb-vector","~:imports",null,"~:requires",["^ ","~$clojure.core.rrb-vector.protocols","^@","~$clojure.core.rrb-vector.rrbt","^A","~$clojure.core.rrb-vector.interop","^B"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$-as-rrbt","^A","~$-slicev","^@","~$-splicev","^@"],"~:defs",["^ ","~$catvec",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/ray/.cljs/.aot_cache/1.10.520/4A69ED9/clojure/core/rrb_vector.cljs","~:line",36,"~:column",7,"~:end-line",36,"~:end-column",13,"~:arglists",["~#list",["~$quote",["^R",[[],["~$v1"],["^T","~$v2"],["^T","^U","~$v3"],["^T","^U","^V","~$v4"],["^T","^U","^V","^W","~$&","~$vn"]]]]],"~:doc","Concatenates the given vectors in logarithmic time.","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",4,"~:max-fixed-arity",4,"~:method-params",["^R",[[],["^T"],["^T","^U"],["^T","^U","^V"],["^T","^U","^V","^W"]]],"^Q",["^R",[[],["^T"],["^T","^U"],["^T","^U","^V"],["^T","^U","^V","^W"],["^T","^U","^V","^W","~$&","^X"]]],"~:arglists-meta",["^R",[null,null,null,null,null,null]]]],"^<","~$clojure.core.rrb-vector/catvec","^L","/Users/ray/.cljs/.aot_cache/1.10.520/4A69ED9/clojure/core/rrb_vector.cljs","^P",13,"^Z",["^ ","^[",true,"^10",4,"^11",4,"^12",["^R",[[],["^T"],["^T","^U"],["^T","^U","^V"],["^T","^U","^V","^W"]]],"^Q",["^R",[[],["^T"],["^T","^U"],["^T","^U","^V"],["^T","^U","^V","^W"],["^T","^U","^V","^W","~$&","^X"]]],"^13",["^R",[null,null,null,null,null,null]]],"^12",["^R",[[],["^T"],["^T","^U"],["^T","^U","^V"],["^T","^U","^V","^W"]]],"~:protocol-impl",null,"^10",4,"^13",["^R",[null,null,null,null,null,null]],"^N",1,"^[",true,"~:methods",[["^ ","^10",0,"^[",false,"~:tag","~$cljs.core/IVector"],["^ ","^10",1,"^[",false],["^ ","^10",2,"^[",false,"^17","~$any"],["^ ","^10",3,"^[",false,"^17","^19"],["^ ","^10",4,"^[",false,"^17","^19"],["^ ","^10",4,"^[",true,"^17","^19"]],"^M",36,"^O",36,"^11",4,"~:fn-var",true,"^Q",["^R",[[],["^T"],["^T","^U"],["^T","^U","^V"],["^T","^U","^V","^W"],["^T","^U","^V","^W","~$&","^X"]]],"^Y","Concatenates the given vectors in logarithmic time."],"^;",["^ ","^J",null,"^K",["^ ","^L","/Users/ray/.cljs/.aot_cache/1.10.520/4A69ED9/clojure/core/rrb_vector.cljs","^M",52,"^N",7,"^O",52,"^P",13,"^Q",["^R",["^S",["^R",[["~$v","~$start"],["~$v","^1;","~$end"]]]]],"^Y","Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range.","^Z",["^ ","^[",false,"^10",3,"^11",3,"^12",["^R",[["~$v","^1;"],["~$v","^1;","^1<"]]],"^Q",["^R",[["~$v","^1;"],["~$v","^1;","^1<"]]],"^13",["^R",[null,null]]]],"^<","~$clojure.core.rrb-vector/subvec","^L","/Users/ray/.cljs/.aot_cache/1.10.520/4A69ED9/clojure/core/rrb_vector.cljs","^P",13,"^Z",["^ ","^[",false,"^10",3,"^11",3,"^12",["^R",[["~$v","^1;"],["~$v","^1;","^1<"]]],"^Q",["^R",[["~$v","^1;"],["~$v","^1;","^1<"]]],"^13",["^R",[null,null]]],"^12",["^R",[["~$v","^1;"],["~$v","^1;","^1<"]]],"^15",null,"^10",3,"^13",["^R",[null,null]],"^N",1,"^[",false,"^16",[["^ ","^10",2,"^[",false,"^17","^19"],["^ ","^10",3,"^[",false,"^17","^19"]],"^M",52,"^O",52,"^11",3,"^1:",true,"^Q",["^R",[["~$v","^1;"],["~$v","^1;","^1<"]]],"^Y","Returns a new vector containing the elements of the given vector v\n  lying between the start (inclusive) and end (exclusive) indices in\n  logarithmic time. end defaults to end of vector. The resulting\n  vector shares structure with the original, but does not hold on to\n  any elements of the original vector lying outside the given index\n  range."],"^:",["^ ","^J",null,"^K",["^ ","^L","/Users/ray/.cljs/.aot_cache/1.10.520/4A69ED9/clojure/core/rrb_vector.cljs","^M",64,"^N",7,"^O",64,"^P",13,"^Q",["^R",["^S",["^R",[[],["~$x1"],["^1>","~$x2"],["^1>","^1?","~$x3"],["^1>","^1?","^1@","~$x4"],["^1>","^1?","^1@","^1A","~$&","~$xn"]]]]],"^Y","Creates a new vector containing the args.","^Z",["^ ","^[",true,"^10",4,"^11",4,"^12",["^R",[[],["^1>"],["^1>","^1?"],["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"]]],"^Q",["^R",[[],["^1>"],["^1>","^1?"],["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"],["^1>","^1?","^1@","^1A","~$&","^1B"]]],"^13",["^R",[null,null,null,null,null,null]]]],"^<","~$clojure.core.rrb-vector/vector","^L","/Users/ray/.cljs/.aot_cache/1.10.520/4A69ED9/clojure/core/rrb_vector.cljs","^P",13,"^Z",["^ ","^[",true,"^10",4,"^11",4,"^12",["^R",[[],["^1>"],["^1>","^1?"],["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"]]],"^Q",["^R",[[],["^1>"],["^1>","^1?"],["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"],["^1>","^1?","^1@","^1A","~$&","^1B"]]],"^13",["^R",[null,null,null,null,null,null]]],"^12",["^R",[[],["^1>"],["^1>","^1?"],["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"]]],"^15",null,"^10",4,"^13",["^R",[null,null,null,null,null,null]],"^N",1,"^[",true,"^16",[["^ ","^10",0,"^[",false],["^ ","^10",1,"^[",false],["^ ","^10",2,"^[",false],["^ ","^10",3,"^[",false],["^ ","^10",4,"^[",false],["^ ","^10",4,"^[",true,"^17",["^8",[null,"~$clj","^19"]]]],"^M",64,"^O",64,"^11",4,"^1:",true,"^Q",["^R",[[],["^1>"],["^1>","^1?"],["^1>","^1?","^1@"],["^1>","^1?","^1@","^1A"],["^1>","^1?","^1@","^1A","~$&","^1B"]]],"^Y","Creates a new vector containing the args."],"^9",["^ ","^J",null,"^K",["^ ","^L","/Users/ray/.cljs/.aot_cache/1.10.520/4A69ED9/clojure/core/rrb_vector.cljs","^M",86,"^N",7,"^O",86,"^P",10,"^Q",["^R",["^S",["^R",[["~$coll"]]]]],"^Y","Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll."],"^<","~$clojure.core.rrb-vector/vec","^L","/Users/ray/.cljs/.aot_cache/1.10.520/4A69ED9/clojure/core/rrb_vector.cljs","^P",10,"^12",["^R",[["^1E"]]],"^15",null,"^13",["^R",[null,null]],"^N",1,"^[",false,"^M",86,"~:ret-tag","^19","^O",86,"^11",1,"^1:",true,"^Q",["^R",["^S",["^R",[["^1E"]]]]],"^Y","Returns a vector containing the contents of coll.\n\n  If coll is a vector, returns an RRB vector using the internal tree\n  of coll."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^6","^6"],"^Y","An implementation of the confluently persistent vector data\n  structure introduced in Bagwell, Rompf, \"RRB-Trees: Efficient\n  Immutable Vectors\", EPFL-REPORT-169879, September, 2011.\n\n  RRB-Trees build upon Clojure's PersistentVectors, adding logarithmic\n  time concatenation and slicing.\n\n  The main API entry points are clojure.core.rrb-vector/catvec,\n  performing vector concatenation, and clojure.core.rrb-vector/subvec,\n  which produces a new vector containing the appropriate subrange of\n  the input vector (in contrast to cljs.core/subvec, which returns a\n  view on the input vector).\n\n  The implementation allows for seamless interoperability with\n  cljs.core/PersistentVector and cljs.core.Subvec instances:\n  clojure.core.rrb-vector/catvec and clojure.core.rrb-vector/subvec\n  convert their inputs to clojure.core.rrb-vector.rrbt/Vector\n  instances whenever necessary (this is a very fast constant time\n  operation for PersistentVector; for Subvec it is O(log n), where n\n  is the size of the underlying vector).\n\n  clojure.core.rrb-vector also exports its own versions of vector and\n  vec which always produce clojure.core.rrb-vector.rrbt.Vector\n  instances."]