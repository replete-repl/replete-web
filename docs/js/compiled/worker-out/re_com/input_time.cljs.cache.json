["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$parseInt",["^ "],"~$isNaN",["^ "],"~$Error",["^ "],"~$goog",["^ ","~$DEBUG",["^ "]]],"~:use-macros",["^ ","~$validate-args-macro","~$re-com.validate","~$handler-fn","~$re-com.core"],"~:excludes",["~#set",[]],"~:name","~$re-com.input-time","~:imports",null,"~:requires",["^ ","~$reagent","~$reagent.core","^D","^D","^:","^:","~$re-com.text","^E","~$re-com.box","^F","~$re-com.util","^G"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$html-attr?","^:","~$h-box","^F","~$deref-or-value","^G","~$css-style?","^:","~$label","^E","~$number-or-string?","^:","~$pad-zero-number","^G","~$gap","^F"],"~:defs",["^ ","~$text->time",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","~:line",50,"~:column",7,"~:end-line",50,"~:end-column",17,"~:arglists",["~#list",["~$quote",["^10",[["~$text"]]]]],"~:doc","return as a time int, the contents of 'text'"],"^?","~$re-com.input-time/text->time","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",17,"~:method-params",["^10",[["^12"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^X",1,"~:variadic?",false,"^W",50,"~:ret-tag","~$number","^Y",50,"~:max-fixed-arity",1,"~:fn-var",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","return as a time int, the contents of 'text'"],"~$on-defocus",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",116,"^X",8,"^Y",116,"^Z",18,"~:private",true,"^[",["^10",["^11",["^10",[["~$text-model","~$min","~$max","~$callback","~$previous-val"]]]]],"^13","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"^1>",true,"^?","~$re-com.input-time/on-defocus","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",18,"^15",["^10",[["^1?","^1@","^1A","^1B","^1C"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",116,"^19",["^>",["~$any","~$clj-nil"]],"^Y",116,"^1;",5,"^1<",true,"^[",["^10",["^11",["^10",[["^1?","^1@","^1A","^1B","^1C"]]]]],"^13","Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary"],"~$valid-time?",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",74,"^X",7,"^Y",74,"^Z",18,"^[",["^10",["^11",["^10",[["~$time"]]]]]],"^?","~$re-com.input-time/valid-time?","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",18,"^15",["^10",[["^1H"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",74,"^19","~$boolean","^Y",74,"^1;",1,"^1<",true,"^[",["^10",["^11",["^10",[["^1H"]]]]]],"~$input-time-args-desc",["^ ","^?","~$re-com.input-time/input-time-args-desc","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",127,"^X",1,"^Y",127,"^Z",26,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",127,"^X",6,"^Y",127,"^Z",26],"~:tag","~$cljs.core/IVector"],"~$time->hrs",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",15,"^X",8,"^Y",15,"^Z",17,"^1>",true,"^[",["^10",["^11",["^10",[["^1H"]]]]]],"^1>",true,"^?","~$re-com.input-time/time->hrs","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",17,"^15",["^10",[["^1H"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",15,"^19","^1:","^Y",15,"^1;",1,"^1<",true,"^[",["^10",["^11",["^10",[["^1H"]]]]]],"~$time->mins",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",10,"^X",8,"^Y",10,"^Z",18,"^1>",true,"^[",["^10",["^11",["^10",[["^1H"]]]]]],"^1>",true,"^?","~$re-com.input-time/time->mins","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",18,"^15",["^10",[["^1H"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",10,"^19","^1:","^Y",10,"^1;",1,"^1<",true,"^[",["^10",["^11",["^10",[["^1H"]]]]]],"~$triple->time",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",25,"^X",8,"^Y",25,"^Z",20,"^1>",true,"^[",["^10",["^11",["^10",[[["~$hr","~$_","~$mi"]]]]]],"^13","Return a time integer from a triple int vector of form  [H  _  M]"],"^1>",true,"^?","~$re-com.input-time/triple->time","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",20,"^15",["^10",[["~$p__12435"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",25,"^19","^1:","^Y",25,"^1;",1,"^1<",true,"^[",["^10",["^11",["^10",[[["^1T","~$_","^1U"]]]]]],"^13","Return a time integer from a triple int vector of form  [H  _  M]"],"~$valid-text?",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",66,"^X",7,"^Y",66,"^Z",18,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"^?","~$re-com.input-time/valid-text?","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",18,"^15",["^10",[["^12"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",66,"^19","^1J","^Y",66,"^1;",1,"^1<",true,"^[",["^10",["^11",["^10",[["^12"]]]]],"^13","Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression"],"~$time->text",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",59,"^X",7,"^Y",59,"^Z",17,"^[",["^10",["^11",["^10",[["^1H"]]]]],"^13","return a string of format HH:MM for 'time'"],"^?","~$re-com.input-time/time->text","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",17,"^15",["^10",[["^1H"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",59,"^19","~$string","^Y",59,"^1;",1,"^1<",true,"^[",["^10",["^11",["^10",[["^1H"]]]]],"^13","return a string of format HH:MM for 'time'"],"~$triple-seeking-re",["^ ","^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",40,"^X",3,"^Y",40,"^Z",20,"^1>",true],"^1>",true,"^?","~$re-com.input-time/triple-seeking-re","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",20,"^X",1,"^W",39,"^Y",40,"^1M","^1E"],"~$on-new-keypress",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",101,"^X",8,"^Y",101,"^Z",23,"^1>",true,"^[",["^10",["^11",["^10",[["~$event","^1?"]]]]],"^13","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"^1>",true,"^?","~$re-com.input-time/on-new-keypress","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",23,"^15",["^10",[["^24","^1?"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",101,"^19",["^>",[null,"^1E","^1F"]],"^Y",101,"^1;",2,"^1<",true,"^[",["^10",["^11",["^10",[["^24","^1?"]]]]],"^13","Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid"],"~$to-int",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",19,"^X",8,"^Y",19,"^Z",14,"^1>",true,"^[",["^10",["^11",["^10",[["~$s"]]]]],"^13","Parse the string 's' to a valid int. On parse failure, return 0"],"^1>",true,"^?","~$re-com.input-time/to-int","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",14,"^15",["^10",[["~$s"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",19,"^19",["^>",["~$js","^1:"]],"^Y",19,"^1;",1,"^1<",true,"^[",["^10",["^11",["^10",[["~$s"]]]]],"^13","Parse the string 's' to a valid int. On parse failure, return 0"],"~$extract-triple-from-text",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",42,"^X",8,"^Y",42,"^Z",32,"^1>",true,"^[",["^10",["^11",["^10",[["^12"]]]]]],"^1>",true,"^?","~$re-com.input-time/extract-triple-from-text","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",32,"^15",["^10",[["^12"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",42,"^19","~$cljs.core/LazySeq","^Y",42,"^1;",1,"^1<",true,"^[",["^10",["^11",["^10",[["^12"]]]]]],"~$validate-arg-times",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",82,"^X",8,"^Y",82,"^Z",26,"^1>",true,"^[",["^10",["^11",["^10",[["~$model","~$minimum","~$maximum"]]]]]],"^1>",true,"^?","~$re-com.input-time/validate-arg-times","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",26,"^15",["^10",[["^2=","^2>","^2?"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",82,"^19","^1J","^Y",82,"^1;",3,"^1<",true,"^[",["^10",["^11",["^10",[["^2=","^2>","^2?"]]]]]],"~$force-valid-time",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",90,"^X",8,"^Y",90,"^Z",24,"^1>",true,"^[",["^10",["^11",["^10",[["^1H","^1@","^1A","~$previous"]]]]],"^13","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"^1>",true,"^?","~$re-com.input-time/force-valid-time","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",24,"^15",["^10",[["^1H","^1@","^1A","^2B"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",90,"^Y",90,"^1;",4,"^1<",true,"^[",["^10",["^11",["^10",[["^1H","^1@","^1A","^2B"]]]]],"^13","Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid"],"~$input-time",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",141,"^X",7,"^Y",141,"^Z",17,"^[",["^10",["^11",["^10",[["~$&",["^ ","~:keys",["^2=","^2>","^2?"],"~:as","~$args","~:or",["^ ","^2>",0,"^2?",2359]]]]]]],"^13","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above","~:top-fn",["^ ","^18",true,"~:fixed-arity",0,"^1;",0,"^15",[["^10",[["^ ","^2E",["^2=","^2>","^2?"],"^2F","^2G","^2H",["^ ","^2>",0,"^2?",2359]]]]],"^[",["^10",[["~$&",["^ ","^2E",["^2=","^2>","^2?"],"^2F","^2G","^2H",["^ ","^2>",0,"^2?",2359]]]]],"^17",["^10",[null]]]],"^?","~$re-com.input-time/input-time","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",17,"^2I",["^ ","^18",true,"^2J",0,"^1;",0,"^15",[["^10",[["^ ","^2E",["^2=","^2>","^2?"],"^2F","^2G","^2H",["^ ","^2>",0,"^2?",2359]]]]],"^[",["^10",[["~$&",["^ ","^2E",["^2=","^2>","^2?"],"^2F","^2G","^2H",["^ ","^2>",0,"^2?",2359]]]]],"^17",["^10",[null]]],"^15",[["^10",[["^ ","^2E",["^2=","^2>","^2?"],"^2F","^2G","^2H",["^ ","^2>",0,"^2?",2359]]]]],"^16",null,"^2J",0,"^17",["^10",[null]],"^X",1,"^18",true,"~:methods",[["^ ","^2J",0,"^18",true,"^1M","~$function"]],"^W",141,"^19","^1E","^Y",141,"^1;",0,"^1<",true,"^[",["^10",[["~$&",["^ ","^2E",["^2=","^2>","^2?"],"^2F","^2G","^2H",["^ ","^2>",0,"^2?",2359]]]]],"^13","I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above"],"~$lose-focus-if-enter",["^ ","^T",null,"^U",["^ ","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^W",109,"^X",8,"^Y",109,"^Z",27,"^1>",true,"^[",["^10",["^11",["^10",[["~$ev"]]]]],"^13","When Enter is pressed, force the component to lose focus"],"^1>",true,"^?","~$re-com.input-time/lose-focus-if-enter","^V","/Users/ray/.cljs/.aot_cache/1.10.520/B7B10B2/re_com/input_time.cljs","^Z",27,"^15",["^10",[["^2O"]]],"^16",null,"^17",["^10",[null,null]],"^X",1,"^18",false,"^W",109,"^19",["^>",["^1J","^1F"]],"^Y",109,"^1;",1,"^1<",true,"^[",["^10",["^11",["^10",[["^2O"]]]]],"^13","When Enter is pressed, force the component to lose focus"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^<","^<","^C","^D","^D","^D","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^>",["~:description","~:children","~:div.time-icon","~:disabled","~:else","~:i.zmdi.zmdi-hc-fw-rc.zmdi-time","~:default","^?","~:value","~:maximum","~:hide-border?","~:width","~:on-blur","~:type","~:style","~:on-key-up","~:class","~:minimum","~:show-icon?","~:code","~:position","~:validate-fn","~:br","~:input","~:on-change","~:border","~:disabled?","~:required","~:height","~:span","~:margin","~:model","~:attr"]],"~:order",["^2Y","^?","^3C","^35","^3=","^2U","^3G","^3@","^2[","^39","^31","^3B","^3:","^32","^33","^3D","^38","^36","^3H","^3E","^3;","^3>","^3A","^2V","^3?","^30","^2X","^34","^37","^2W","^2Z","^3<","^3F"]],"^13",null]