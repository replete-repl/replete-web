["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.core","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^;","~$subs","~$re-frame.subs","~$set","~$clojure.set","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^B","~$fx","~$re-frame.fx","~$re-frame.events","^E","~$loggers","~$re-frame.loggers","^D","^D","~$re-frame.registrar","^H","~$interceptor","^B","~$router","~$re-frame.router","~$db","~$re-frame.db","~$registrar","^H","^K","^K","^?","^?","~$events","^E","~$re-frame.std-interceptors","^P","^G","^G","^=","^=","~$interop","^;","~$std-interceptors","^P","^A","^A","^M","^M"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$ctx-handler->interceptor","^P","~$fx-handler->interceptor","^P","~$db-handler->interceptor","^P"],"~:defs",["^ ","~$console",["^ ","^7","~$re-frame.core/console","~:file","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","~:line",164,"~:column",1,"~:end-line",164,"~:end-column",13,"~:meta",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",164,"^11",6,"^12",164,"^13",13]],"~$on-changes",["^ ","^7","~$re-frame.core/on-changes","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",127,"^11",1,"^12",127,"^13",16,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",127,"^11",6,"^12",127,"^13",16]],"~$enrich",["^ ","^7","~$re-frame.core/enrich","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",124,"^11",1,"^12",124,"^13",12,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",124,"^11",6,"^12",124,"^13",12]],"~$reg-sub-raw",["^ ","~:protocol-inline",null,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",51,"^11",7,"^12",51,"^13",18,"~:arglists",["~#list",["~$quote",["^1<",[["~$query-id","~$handler-fn"]]]]],"~:doc","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"^7","~$re-frame.core/reg-sub-raw","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^13",18,"~:method-params",["^1<",[["^1>","^1?"]]],"~:protocol-impl",null,"~:arglists-meta",["^1<",[null,null]],"^11",1,"~:variadic?",false,"^10",51,"~:ret-tag","~$any","^12",51,"~:max-fixed-arity",2,"~:fn-var",true,"^1;",["^1<",["^1=",["^1<",[["^1>","^1?"]]]]],"^1@","This is a low level, advanced function.  You should probably be\n  using reg-sub instead.\n  Docs in https://github.com/Day8/re-frame/blob/master/docs/SubscriptionFlow.md"],"~$subscribe",["^ ","^7","~$re-frame.core/subscribe","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",46,"^11",1,"^12",46,"^13",15,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",46,"^11",6,"^12",46,"^13",15]],"~$assoc-coeffect",["^ ","^7","~$re-frame.core/assoc-coeffect","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",144,"^11",1,"^12",144,"^13",20,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",144,"^11",6,"^12",144,"^13",20]],"~$register-sub",["^ ","^1:",null,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",234,"^11",7,"^12",234,"^13",19,"^1;",["^1<",["^1=",["^1<",[["~$&","~$args"]]]]],"~:top-fn",["^ ","^1E",true,"~:fixed-arity",0,"^1H",0,"^1B",[["^1<",["^1O"]]],"^1;",["^1<",[["~$&","^1O"]]],"^1D",["^1<",[null]]]],"^7","~$re-frame.core/register-sub","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^13",19,"^1P",["^ ","^1E",true,"^1Q",0,"^1H",0,"^1B",[["^1<",["^1O"]]],"^1;",["^1<",[["~$&","^1O"]]],"^1D",["^1<",[null]]],"^1B",[["^1<",["^1O"]]],"^1C",null,"^1Q",0,"^1D",["^1<",[null]],"^11",1,"^1E",true,"~:methods",[["^ ","^1Q",0,"^1E",true,"~:tag","^1G"]],"^10",234,"^1F","^1G","^12",234,"^1H",0,"^1I",true,"^1;",["^1<",[["~$&","^1O"]]]],"~$purge-event-queue",["^ ","^1:",null,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",194,"^11",7,"^12",194,"^13",24,"^1;",["^1<",["^1=",["^1<",[[]]]]],"^1@","Remove all events queued for processing"],"^7","~$re-frame.core/purge-event-queue","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^13",24,"^1B",["^1<",[[]]],"^1C",null,"^1D",["^1<",[null,null]],"^11",1,"^1E",false,"^10",194,"^1F","^1G","^12",194,"^1H",0,"^1I",true,"^1;",["^1<",["^1=",["^1<",[[]]]]],"^1@","Remove all events queued for processing"],"~$remove-post-event-callback",["^ ","^1:",null,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",222,"^11",7,"^12",222,"^13",33,"^1;",["^1<",["^1=",["^1<",[["~$id"]]]]]],"^7","~$re-frame.core/remove-post-event-callback","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^13",33,"^1B",["^1<",[["^1X"]]],"^1C",null,"^1D",["^1<",[null,null]],"^11",1,"^1E",false,"^10",222,"^1F","^1G","^12",222,"^1H",1,"^1I",true,"^1;",["^1<",["^1=",["^1<",[["^1X"]]]]]],"~$path",["^ ","^7","~$re-frame.core/path","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",123,"^11",1,"^12",123,"^13",10,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",123,"^11",6,"^12",123,"^13",10]],"~$reg-sub",["^ ","^7","~$re-frame.core/reg-sub","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",45,"^11",1,"^12",45,"^13",13,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",45,"^11",6,"^12",45,"^13",13]],"~$make-restore-fn",["^ ","^1:",null,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",169,"^11",7,"^12",169,"^13",22,"^1;",["^1<",["^1=",["^1<",[[]]]]],"^1@","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"^7","~$re-frame.core/make-restore-fn","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^13",22,"^1B",["^1<",[[]]],"^1C",null,"^1D",["^1<",[null,null]],"^11",1,"^1E",false,"^10",169,"^1F","~$function","^12",169,"^1H",0,"^1I",true,"^1;",["^1<",["^1=",["^1<",[[]]]]],"^1@","Checkpoints the state of re-frame and returns a function which, when\n  later called, will restore re-frame to that checkpointed state.\n\n  Checkpoint includes app-db, all registered handlers and all subscriptions.\n  "],"~$clear-fx",["^ ","^7","~$re-frame.core/clear-fx","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",61,"^11",1,"^12",61,"^13",14,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",61,"^11",6,"^12",61,"^13",14],"^1T","^24"],"~$get-effect",["^ ","^7","~$re-frame.core/get-effect","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",145,"^11",1,"^12",145,"^13",16,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",145,"^11",6,"^12",145,"^13",16]],"~$reg-event-db",["^ ","^1:",null,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",71,"^11",7,"^12",71,"^13",19,"^1;",["^1<",["^1=",["^1<",[["^1X","~$handler"],["^1X","~$interceptors","^2:"]]]]],"^1@","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain.","^1P",["^ ","^1E",false,"^1Q",3,"^1H",3,"^1B",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1;",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1D",["^1<",[null,null]]]],"^7","~$re-frame.core/reg-event-db","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^13",19,"^1P",["^ ","^1E",false,"^1Q",3,"^1H",3,"^1B",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1;",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1D",["^1<",[null,null]]],"^1B",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1C",null,"^1Q",3,"^1D",["^1<",[null,null]],"^11",1,"^1E",false,"^1S",[["^ ","^1Q",2,"^1E",false,"^1T","^1G"],["^ ","^1Q",3,"^1E",false,"^1T","^1G"]],"^10",71,"^12",71,"^1H",3,"^1I",true,"^1;",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1@","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (db event) -> db\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of this\n   chain."],"~$dispatch-sync",["^ ","^7","~$re-frame.core/dispatch-sync","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",41,"^11",1,"^12",41,"^13",19,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",41,"^11",6,"^12",41,"^13",19]],"~$clear-event",["^ ","^7","~$re-frame.core/clear-event","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",116,"^11",1,"^12",116,"^13",17,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",116,"^11",6,"^12",116,"^13",17],"^1T","^24"],"~$->interceptor",["^ ","^7","~$re-frame.core/->interceptor","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",142,"^11",1,"^12",142,"^13",19,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",142,"^11",6,"^12",142,"^13",19]],"~$set-loggers!",["^ ","^7","~$re-frame.core/set-loggers!","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",157,"^11",1,"^12",157,"^13",18,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",157,"^11",6,"^12",157,"^13",18]],"~$inject-cofx",["^ ","^7","~$re-frame.core/inject-cofx","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",65,"^11",1,"^12",65,"^13",17,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",65,"^11",6,"^12",65,"^13",17]],"~$get-coeffect",["^ ","^7","~$re-frame.core/get-coeffect","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",143,"^11",1,"^12",143,"^13",18,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",143,"^11",6,"^12",143,"^13",18]],"~$debug",["^ ","^7","~$re-frame.core/debug","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",122,"^11",1,"^12",122,"^13",11,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",122,"^11",6,"^12",122,"^13",11],"^1T","~$cljs.core/IMap"],"~$assoc-effect",["^ ","^7","~$re-frame.core/assoc-effect","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",146,"^11",1,"^12",146,"^13",18,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",146,"^11",6,"^12",146,"^13",18]],"~$enqueue",["^ ","^7","~$re-frame.core/enqueue","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",147,"^11",1,"^12",147,"^13",13,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",147,"^11",6,"^12",147,"^13",13]],"~$clear-cofx",["^ ","^7","~$re-frame.core/clear-cofx","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",66,"^11",1,"^12",66,"^13",16,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",66,"^11",6,"^12",66,"^13",16],"^1T","^24"],"~$reg-event-ctx",["^ ","^1:",null,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",104,"^11",7,"^12",104,"^13",20,"^1;",["^1<",["^1=",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]]]],"^1@","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. ","^1P",["^ ","^1E",false,"^1Q",3,"^1H",3,"^1B",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1;",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1D",["^1<",[null,null]]]],"^7","~$re-frame.core/reg-event-ctx","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^13",20,"^1P",["^ ","^1E",false,"^1Q",3,"^1H",3,"^1B",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1;",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1D",["^1<",[null,null]]],"^1B",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1C",null,"^1Q",3,"^1D",["^1<",[null,null]],"^11",1,"^1E",false,"^1S",[["^ ","^1Q",2,"^1E",false,"^1T","^1G"],["^ ","^1Q",3,"^1E",false,"^1T","^1G"]],"^10",104,"^12",104,"^1H",3,"^1I",true,"^1;",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1@","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (context-map event-vector) -> context-map\n\n  This form of registration is almost never used. "],"~$reg-fx",["^ ","^7","~$re-frame.core/reg-fx","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",60,"^11",1,"^12",60,"^13",12,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",60,"^11",6,"^12",60,"^13",12]],"~$trim-v",["^ ","^7","~$re-frame.core/trim-v","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",125,"^11",1,"^12",125,"^13",12,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",125,"^11",6,"^12",125,"^13",12],"^1T","^2K"],"~$clear-sub",["^ ","^7","~$re-frame.core/clear-sub","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",48,"^11",1,"^12",48,"^13",15,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",48,"^11",6,"^12",48,"^13",15],"^1T","^24"],"~$dispatch",["^ ","^7","~$re-frame.core/dispatch","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",40,"^11",1,"^12",40,"^13",14,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",40,"^11",6,"^12",40,"^13",14]],"~$after",["^ ","^7","~$re-frame.core/after","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",126,"^11",1,"^12",126,"^13",11,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",126,"^11",6,"^12",126,"^13",11]],"~$add-post-event-callback",["^ ","^1:",null,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",201,"^11",7,"^12",201,"^13",30,"^1;",["^1<",["^1=",["^1<",[["~$f"],["^1X","~$f"]]]]],"^1@","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  ","^1P",["^ ","^1E",false,"^1Q",2,"^1H",2,"^1B",["^1<",[["~$f"],["^1X","~$f"]]],"^1;",["^1<",[["~$f"],["^1X","~$f"]]],"^1D",["^1<",[null,null]]]],"^7","~$re-frame.core/add-post-event-callback","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^13",30,"^1P",["^ ","^1E",false,"^1Q",2,"^1H",2,"^1B",["^1<",[["~$f"],["^1X","~$f"]]],"^1;",["^1<",[["~$f"],["^1X","~$f"]]],"^1D",["^1<",[null,null]]],"^1B",["^1<",[["~$f"],["^1X","~$f"]]],"^1C",null,"^1Q",2,"^1D",["^1<",[null,null]],"^11",1,"^1E",false,"^1S",[["^ ","^1Q",1,"^1E",false,"^1T","^1G"],["^ ","^1Q",2,"^1E",false,"^1T","^1G"]],"^10",201,"^12",201,"^1H",2,"^1I",true,"^1;",["^1<",[["~$f"],["^1X","~$f"]]],"^1@","Registers a function `f` to be called after each event is processed\n   `f` will be called with two arguments:\n    - `event`: a vector. The event just processed.\n    - `queue`: a PersistentQueue, possibly empty, of events yet to be processed.\n\n   This is useful in advanced cases like:\n     - you are implementing a complex bootstrap pipeline\n     - you want to create your own handling infrastructure, with perhaps multiple\n       handlers for the one event, etc.  Hook in here.\n     - libraries providing 'isomorphic javascript' rendering on  Nodejs or Nashorn.\n\n  'id' is typically a keyword. Supplied at \"add time\" so it can subsequently\n  be used at \"remove time\" to get rid of the right callback.\n  "],"~$reg-cofx",["^ ","^7","~$re-frame.core/reg-cofx","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",64,"^11",1,"^12",64,"^13",14,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",64,"^11",6,"^12",64,"^13",14]],"~$reg-event-fx",["^ ","^1:",null,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",87,"^11",7,"^12",87,"^13",19,"^1;",["^1<",["^1=",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]]]],"^1@","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects.","^1P",["^ ","^1E",false,"^1Q",3,"^1H",3,"^1B",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1;",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1D",["^1<",[null,null]]]],"^7","~$re-frame.core/reg-event-fx","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^13",19,"^1P",["^ ","^1E",false,"^1Q",3,"^1H",3,"^1B",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1;",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1D",["^1<",[null,null]]],"^1B",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1C",null,"^1Q",3,"^1D",["^1<",[null,null]],"^11",1,"^1E",false,"^1S",[["^ ","^1Q",2,"^1E",false,"^1T","^1G"],["^ ","^1Q",3,"^1E",false,"^1T","^1G"]],"^10",87,"^12",87,"^1H",3,"^1I",true,"^1;",["^1<",[["^1X","^2:"],["^1X","^2;","^2:"]]],"^1@","Register the given event `handler` (function) for the given `id`. Optionally, provide\n  an `interceptors` chain.\n  `id` is typically a namespaced keyword  (but can be anything)\n  `handler` is a function: (coeffects-map event-vector) -> effects-map\n  `interceptors` is a collection of interceptors. Will be flattened and nils removed.\n  `handler` is wrapped in its own interceptor and added to the end of the interceptor\n   chain, so that, in the end, only a chain is registered.\n   Special effects and coeffects interceptors are added to the front of the\n   interceptor chain.  These interceptors inject the value of app-db into coeffects,\n   and, later, action effects."],"~$register-handler",["^ ","^1:",null,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",229,"^11",7,"^12",229,"^13",23,"^1;",["^1<",["^1=",["^1<",[["~$&","^1O"]]]]],"^1P",["^ ","^1E",true,"^1Q",0,"^1H",0,"^1B",[["^1<",["^1O"]]],"^1;",["^1<",[["~$&","^1O"]]],"^1D",["^1<",[null]]]],"^7","~$re-frame.core/register-handler","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^13",23,"^1P",["^ ","^1E",true,"^1Q",0,"^1H",0,"^1B",[["^1<",["^1O"]]],"^1;",["^1<",[["~$&","^1O"]]],"^1D",["^1<",[null]]],"^1B",[["^1<",["^1O"]]],"^1C",null,"^1Q",0,"^1D",["^1<",[null]],"^11",1,"^1E",true,"^1S",[["^ ","^1Q",0,"^1E",true,"^1T","^1G"]],"^10",229,"^1F","^1G","^12",229,"^1H",0,"^1I",true,"^1;",["^1<",[["~$&","^1O"]]]],"~$clear-subscription-cache!",["^ ","^7","~$re-frame.core/clear-subscription-cache!","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",49,"^11",1,"^12",49,"^13",31,"^14",["^ ","^[","/Users/ray/.cljs/.aot_cache/1.10.520/DD25AC6/re_frame/core.cljc","^10",49,"^11",6,"^12",49,"^13",31]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:warn"]],"~:order",["^3@"]],"^1@",null]